{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Features \u00b6 Build your mongoengine query from DSL syntax Convert your data at build time via transform hook Quickstart \u00b6 Install 1 pip install mongoengine_dsl Use 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from mongoengine import Document , StringField from mongoengine_dsl import Query class User ( Document ): fullname = StringField () User ( fullname = \"Tom\" ) . save () User ( fullname = \"Dick\" ) . save () User ( fullname = \"Harry\" ) . save () assert User . objects ( Query ( \"fullname: Dick\" ) ) . first () . fullname == \"Dick\" assert User . objects ( Query ( \"fullname: dick\" , transform = { \"fullname\" : lambda x : x . title () }) ) . first () . fullname == \"Dick\"","title":"Home"},{"location":"#features","text":"Build your mongoengine query from DSL syntax Convert your data at build time via transform hook","title":"Features"},{"location":"#quickstart","text":"Install 1 pip install mongoengine_dsl Use 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from mongoengine import Document , StringField from mongoengine_dsl import Query class User ( Document ): fullname = StringField () User ( fullname = \"Tom\" ) . save () User ( fullname = \"Dick\" ) . save () User ( fullname = \"Harry\" ) . save () assert User . objects ( Query ( \"fullname: Dick\" ) ) . first () . fullname == \"Dick\" assert User . objects ( Query ( \"fullname: dick\" , transform = { \"fullname\" : lambda x : x . title () }) ) . first () . fullname == \"Dick\"","title":"Quickstart"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Lake Chan Contributors \u00b6 None yet. Why not be the first?","title":"Contributor"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Lake Chan","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 0.1.5 (2022-05-07) \u00b6 Add Python 3.10 support Drop Python 3.6 support due to EOL Fix optional dependency name 0.1.4 (2021-10-08) \u00b6 Removed 0.1.3 (2021-08-25) \u00b6 First release on PyPI. 0.1.2 \u00b6 Removed 0.1.1 \u00b6 Removed","title":"ChangeLog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#015-2022-05-07","text":"Add Python 3.10 support Drop Python 3.6 support due to EOL Fix optional dependency name","title":"0.1.5 (2022-05-07)"},{"location":"changelog/#014-2021-10-08","text":"Removed","title":"0.1.4 (2021-10-08)"},{"location":"changelog/#013-2021-08-25","text":"First release on PyPI.","title":"0.1.3 (2021-08-25)"},{"location":"changelog/#012","text":"Removed","title":"0.1.2"},{"location":"changelog/#011","text":"Removed","title":"0.1.1"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome and greatly appreciated! This page will also guide you to contribute bugfix or new feature from scratch, check Start to code . Contribute in many ways \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/StoneMoe/mongoengine_dsl/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 MongoEngine DSL could always use more documentation, whether as part of the official MongoEngine DSL docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/StoneMoe/mongoengine_dsl/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Start coding \u00b6 Ready to contribute some code? Here's how to set up mongoengine_dsl for local development. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # 1.fork and clone git clone git@github.com:your_name_here/mongoengine_dsl.git cd mongoengine_dsl # 2.tool installation # Poetry pipx install poetry # use pipx pip install poetry # or use pip brew install poetry # or use homebrew # Antlr4 brew install antlr # use homebrew apt-get install antlr4 # or use apt # it's recommended to match version between antlr4 tool and runtime # to avoid unexpected behavior # 3.create and start your virtualenv poetry install -E test -E doc -E dev poetry shell # 4.git pre-commit hook pre-commit install # 5.create your own branch git checkout -b name-of-your-bugfix-or-feature # 6.coding # 7.test your changes tox # 8.add your name to `AUTHORS.md` :D # 9.commit and push git add -A git commit -m \"fix: \" # some files may be modified by pre-commit. If so, please add these files and commit again. git push origin name-of-your-bugfix-or-feature # 10.submit a pull request Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/StoneMoe/mongoengine_dsl/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 To run a subset of tests. 1 pytest tests.test_mongoengine_dsl Release \u00b6 For maintainers. 1 2 3 4 5 6 7 8 9 10 git checkout master git pull tox # final test poetry version [ major | minor | patch ] # bump vim CHANGELOG.md git add CHANGELOG.md pyproject.toml git commit -m \"Release: $( poetry version --short ) \" git tag \"v $( poetry version --short ) \" git push --follow-tags # done","title":"Contributing Guide"},{"location":"contributing/#contributing","text":"Contributions are welcome and greatly appreciated! This page will also guide you to contribute bugfix or new feature from scratch, check Start to code .","title":"Contributing"},{"location":"contributing/#contribute-in-many-ways","text":"","title":"Contribute in many ways"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/StoneMoe/mongoengine_dsl/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"MongoEngine DSL could always use more documentation, whether as part of the official MongoEngine DSL docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/StoneMoe/mongoengine_dsl/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#start-coding","text":"Ready to contribute some code? Here's how to set up mongoengine_dsl for local development. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # 1.fork and clone git clone git@github.com:your_name_here/mongoengine_dsl.git cd mongoengine_dsl # 2.tool installation # Poetry pipx install poetry # use pipx pip install poetry # or use pip brew install poetry # or use homebrew # Antlr4 brew install antlr # use homebrew apt-get install antlr4 # or use apt # it's recommended to match version between antlr4 tool and runtime # to avoid unexpected behavior # 3.create and start your virtualenv poetry install -E test -E doc -E dev poetry shell # 4.git pre-commit hook pre-commit install # 5.create your own branch git checkout -b name-of-your-bugfix-or-feature # 6.coding # 7.test your changes tox # 8.add your name to `AUTHORS.md` :D # 9.commit and push git add -A git commit -m \"fix: \" # some files may be modified by pre-commit. If so, please add these files and commit again. git push origin name-of-your-bugfix-or-feature # 10.submit a pull request","title":"Start coding"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/StoneMoe/mongoengine_dsl/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests. 1 pytest tests.test_mongoengine_dsl","title":"Tips"},{"location":"contributing/#release","text":"For maintainers. 1 2 3 4 5 6 7 8 9 10 git checkout master git pull tox # final test poetry version [ major | minor | patch ] # bump vim CHANGELOG.md git add CHANGELOG.md pyproject.toml git commit -m \"Release: $( poetry version --short ) \" git tag \"v $( poetry version --short ) \" git push --follow-tags # done","title":"Release"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install MongoEngine DSL, run this command in your terminal: 1 $ pip install mongoengine_dsl This is the preferred method to install MongoEngine DSL, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for MongoEngine DSL can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/StoneMoe/mongoengine_dsl Or download the tarball : 1 $ curl -OJL https://github.com/StoneMoe/mongoengine_dsl/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install MongoEngine DSL, run this command in your terminal: 1 $ pip install mongoengine_dsl This is the preferred method to install MongoEngine DSL, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for MongoEngine DSL can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/StoneMoe/mongoengine_dsl Or download the tarball : 1 $ curl -OJL https://github.com/StoneMoe/mongoengine_dsl/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"ref/","text":"Query \u00b6 Source code in mongoengine_dsl/mongoengine_dsl.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Query : def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform ) __new__ ( query , transform = None ) \u00b6 Proxy to build_q() Parameters: Name Type Description Default query str The query string required transform Dict [ str , Callable ] key-callable pairs for field data transform, call at build time None Returns: Type Description Union [ Q , QCombination ] Same as build_q() Source code in mongoengine_dsl/mongoengine_dsl.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform ) build_q ( query , listener_clazz = Antlr4Listener , ** listener_kwargs ) \u00b6 Build mongoengine.Q object from DSL query string Parameters: Name Type Description Default query str The query string required listener_clazz Antlr4 walker listener Antlr4Listener **listener_kwargs Antlr4 walker listener params {} Returns: Type Description Union [ Q , QCombination ] Q object for mongoengine queryset filter Source code in mongoengine_dsl/mongoengine_dsl.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def build_q ( query : str , listener_clazz = Antlr4Listener , ** listener_kwargs ) -> Union [ Q , QCombination ]: \"\"\" Build mongoengine.Q object from DSL query string Args: query: The query string listener_clazz: Antlr4 walker listener **listener_kwargs: Antlr4 walker listener params Returns: Q object for mongoengine queryset filter \"\"\" in_stream = InputStream ( query ) lexer = MongoEngineDSLLexer ( in_stream ) stream = CommonTokenStream ( lexer ) parser = MongoEngineDSLParser ( stream ) tree = parser . process () listener = listener_clazz ( ** listener_kwargs ) walker = ParseTreeWalker () walker . walk ( listener , tree ) return listener . query mongoengine_dsl \u00b6 Query \u00b6 Source code in mongoengine_dsl/mongoengine_dsl.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Query : def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform ) __new__ ( query , transform = None ) \u00b6 Proxy to build_q() Parameters: Name Type Description Default query str The query string required transform Dict [ str , Callable ] key-callable pairs for field data transform, call at build time None Returns: Type Description Union [ Q , QCombination ] Same as build_q() Source code in mongoengine_dsl/mongoengine_dsl.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform ) build_q ( query , listener_clazz = Antlr4Listener , ** listener_kwargs ) \u00b6 Build mongoengine.Q object from DSL query string Parameters: Name Type Description Default query str The query string required listener_clazz Antlr4 walker listener Antlr4Listener **listener_kwargs Antlr4 walker listener params {} Returns: Type Description Union [ Q , QCombination ] Q object for mongoengine queryset filter Source code in mongoengine_dsl/mongoengine_dsl.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def build_q ( query : str , listener_clazz = Antlr4Listener , ** listener_kwargs ) -> Union [ Q , QCombination ]: \"\"\" Build mongoengine.Q object from DSL query string Args: query: The query string listener_clazz: Antlr4 walker listener **listener_kwargs: Antlr4 walker listener params Returns: Q object for mongoengine queryset filter \"\"\" in_stream = InputStream ( query ) lexer = MongoEngineDSLLexer ( in_stream ) stream = CommonTokenStream ( lexer ) parser = MongoEngineDSLParser ( stream ) tree = parser . process () listener = listener_clazz ( ** listener_kwargs ) walker = ParseTreeWalker () walker . walk ( listener , tree ) return listener . query","title":"References"},{"location":"ref/#mongoengine_dsl.Query","text":"Source code in mongoengine_dsl/mongoengine_dsl.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Query : def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform )","title":"Query"},{"location":"ref/#mongoengine_dsl.mongoengine_dsl.Query.__new__","text":"Proxy to build_q() Parameters: Name Type Description Default query str The query string required transform Dict [ str , Callable ] key-callable pairs for field data transform, call at build time None Returns: Type Description Union [ Q , QCombination ] Same as build_q() Source code in mongoengine_dsl/mongoengine_dsl.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform )","title":"__new__()"},{"location":"ref/#mongoengine_dsl.build_q","text":"Build mongoengine.Q object from DSL query string Parameters: Name Type Description Default query str The query string required listener_clazz Antlr4 walker listener Antlr4Listener **listener_kwargs Antlr4 walker listener params {} Returns: Type Description Union [ Q , QCombination ] Q object for mongoengine queryset filter Source code in mongoengine_dsl/mongoengine_dsl.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def build_q ( query : str , listener_clazz = Antlr4Listener , ** listener_kwargs ) -> Union [ Q , QCombination ]: \"\"\" Build mongoengine.Q object from DSL query string Args: query: The query string listener_clazz: Antlr4 walker listener **listener_kwargs: Antlr4 walker listener params Returns: Q object for mongoengine queryset filter \"\"\" in_stream = InputStream ( query ) lexer = MongoEngineDSLLexer ( in_stream ) stream = CommonTokenStream ( lexer ) parser = MongoEngineDSLParser ( stream ) tree = parser . process () listener = listener_clazz ( ** listener_kwargs ) walker = ParseTreeWalker () walker . walk ( listener , tree ) return listener . query","title":"build_q()"},{"location":"ref/#mongoengine_dsl.mongoengine_dsl","text":"","title":"mongoengine_dsl"},{"location":"ref/#mongoengine_dsl.mongoengine_dsl.Query","text":"Source code in mongoengine_dsl/mongoengine_dsl.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Query : def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform )","title":"Query"},{"location":"ref/#mongoengine_dsl.mongoengine_dsl.Query.__new__","text":"Proxy to build_q() Parameters: Name Type Description Default query str The query string required transform Dict [ str , Callable ] key-callable pairs for field data transform, call at build time None Returns: Type Description Union [ Q , QCombination ] Same as build_q() Source code in mongoengine_dsl/mongoengine_dsl.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def __new__ ( cls , query : str , transform : Dict [ str , Callable ] = None ) -> Union [ Q , QCombination ]: \"\"\" Proxy to build_q() Args: query: The query string transform: key-callable pairs for field data transform, call at build time Returns: Same as build_q() \"\"\" return build_q ( query = query , transform = transform )","title":"__new__()"},{"location":"ref/#mongoengine_dsl.mongoengine_dsl.build_q","text":"Build mongoengine.Q object from DSL query string Parameters: Name Type Description Default query str The query string required listener_clazz Antlr4 walker listener Antlr4Listener **listener_kwargs Antlr4 walker listener params {} Returns: Type Description Union [ Q , QCombination ] Q object for mongoengine queryset filter Source code in mongoengine_dsl/mongoengine_dsl.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def build_q ( query : str , listener_clazz = Antlr4Listener , ** listener_kwargs ) -> Union [ Q , QCombination ]: \"\"\" Build mongoengine.Q object from DSL query string Args: query: The query string listener_clazz: Antlr4 walker listener **listener_kwargs: Antlr4 walker listener params Returns: Q object for mongoengine queryset filter \"\"\" in_stream = InputStream ( query ) lexer = MongoEngineDSLLexer ( in_stream ) stream = CommonTokenStream ( lexer ) parser = MongoEngineDSLParser ( stream ) tree = parser . process () listener = listener_clazz ( ** listener_kwargs ) walker = ParseTreeWalker () walker . walk ( listener , tree ) return listener . query","title":"build_q()"},{"location":"syntax/","text":"Syntax \u00b6 Operator \u00b6 Name Syntax Example equal = , == , : field: 'hello' not equal != field != world greater than > nested.field > 0 greater equal >= field >= 11.5 less than < field < 5 less equal <= field <= 5.155 exists :* field_a:* not exists :! field_b:! in @ field_b @ [1,2,\"world\"] not in !@ field_b !@ [true,false] and and (case-insensitive) (field_a:1 and field_b:true) or field_b:false or or (case-insensitive) field_a@[1,2,3] or field_b==1 Data type \u00b6 Name Example integer 1 , 0 , -1 float 3.1415926 , -5.6 string \"hello tom\" , 'world' , no_quote boolean true , false (case-insensitive) array [1,2] , [1 2] , [\"1\",2,true] Grammar defines see mongoengine_dsl/lexer/MongoEngineDSL.g4","title":"Syntax"},{"location":"syntax/#syntax","text":"","title":"Syntax"},{"location":"syntax/#operator","text":"Name Syntax Example equal = , == , : field: 'hello' not equal != field != world greater than > nested.field > 0 greater equal >= field >= 11.5 less than < field < 5 less equal <= field <= 5.155 exists :* field_a:* not exists :! field_b:! in @ field_b @ [1,2,\"world\"] not in !@ field_b !@ [true,false] and and (case-insensitive) (field_a:1 and field_b:true) or field_b:false or or (case-insensitive) field_a@[1,2,3] or field_b==1","title":"Operator"},{"location":"syntax/#data-type","text":"Name Example integer 1 , 0 , -1 float 3.1415926 , -5.6 string \"hello tom\" , 'world' , no_quote boolean true , false (case-insensitive) array [1,2] , [1 2] , [\"1\",2,true] Grammar defines see mongoengine_dsl/lexer/MongoEngineDSL.g4","title":"Data type"}]}